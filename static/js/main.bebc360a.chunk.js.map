{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","state","errorMessage","time","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","console","log","toLocaleTimeString","this","renderContent","React","Component","ReactDOM","render","document","getElementById"],"mappings":"0MAGMA,G,MAAe,CACjBC,OAAQ,CACJC,KAAM,uBACNC,SAAU,OAEdC,OAAQ,CACJF,KAAM,kBACNC,SAAU,eAyBHE,EAbO,SAAAC,GAClB,IATeC,EAAKC,EASdC,GATSF,EASUD,EAAMC,KATXC,GASgB,IAAIE,MAAOC,YARnC,GAAKH,EAAQ,EACdD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIL,EAGAP,EAAaS,GAAhCP,EAHmB,EAGnBA,KAAMC,EAHa,EAGbA,SACd,OACI,yBAAKS,UAAS,yBAAoBH,IAC9B,uBAAGG,UAAS,UAAKT,EAAL,6BACZ,4BAAKD,GACL,uBAAGU,UAAS,UAAKT,EAAL,gCC5BlBU,EAAU,SAAAP,GACZ,OACI,yBAAKM,UAAU,oBACX,yBAAKA,UAAU,sBAAsBN,EAAMQ,WAKvDD,EAAQE,aAAe,CACnBD,QAAS,iBAGED,QCPTG,E,2MAEFC,MAAQ,CACJV,IAAK,KACLW,aAAc,GACdC,KAAM,I,mFAGW,IAAD,OAChBC,OAAOC,UAAUC,YAAYC,mBACzB,SAACC,GAAD,OAAc,EAAKC,SAAS,CAAElB,IAAKiB,EAASE,OAAOC,YACnD,SAACC,GAAD,OAAS,EAAKH,SAAS,CAAEP,aAAcU,EAAId,YAE/Ce,QAAQC,KAAI,IAAIpB,MAAOqB,wB,2CAKvBF,QAAQC,IAAI,6B,sCAKZ,OADAD,QAAQC,IAAI,gCACRE,KAAKf,MAAMC,eAAiBc,KAAKf,MAAMV,IAChC,uCAAayB,KAAKf,MAAMC,eAE9Bc,KAAKf,MAAMC,cAAgBc,KAAKf,MAAMV,IAChC,kBAAC,EAAD,CAAeA,IAAKyB,KAAKf,MAAMV,MAEnC,kBAAC,EAAD,CAASO,QAAQ,qC,+BAGxB,OAII,6BAIKkB,KAAKC,qB,GAxCJC,IAAMC,WAsDxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.bebc360a.chunk.js","sourcesContent":["import './SeasonDisplay.css';\r\nimport React from 'react';\r\n\r\nconst seasonConfig = {\r\n    summer: {\r\n        text: 'Let\\'s hit the beach!',\r\n        iconName: 'sun'\r\n    },\r\n    winter: {\r\n        text: 'Burr it is cold',\r\n        iconName: 'snowflake'\r\n    }\r\n}\r\n\r\nconst getSeason = (lat, month) => {\r\n    if (month > 2 && month < 9) {\r\n        return lat > 0 ? 'summer' : 'winter'\r\n    } else {\r\n        return lat > 0 ? 'winter' : 'summer'\r\n    }\r\n}\r\n\r\nconst SeasonDisplay = props => {\r\n    const season = getSeason(props.lat, new Date().getMonth());\r\n\r\n    const { text, iconName } = seasonConfig[season] //this is for {text and icon name}\r\n    return (\r\n        <div className={`season-display ${season}`}>\r\n            <i className={`${iconName} icon massive icon-left`} />\r\n            <h1>{text}</h1>\r\n            <i className={`${iconName} icon massive icon-right`} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SeasonDisplay;","import React from 'react';\r\n\r\nconst Spinner = props => {\r\n    return (\r\n        <div className=\"ui active dimmer\">\r\n            <div className=\"ui big text loader\">{props.message}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nSpinner.defaultProps = {\r\n    message: '...Loading...'\r\n}\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport SeasonDisplay from './SeasonDisplay'\r\nimport Spinner from './Spinner'\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        lat: null,\r\n        errorMessage: '',\r\n        time: ''\r\n    };\r\n\r\n    componentDidMount() {\r\n        window.navigator.geolocation.getCurrentPosition(\r\n            (position) => this.setState({ lat: position.coords.latitude }),\r\n            (err) => this.setState({ errorMessage: err.message })\r\n        );\r\n        console.log(new Date().toLocaleTimeString())\r\n\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        console.log('My component did update')\r\n    }\r\n\r\n    renderContent() {\r\n        console.log('Render content was invoked??')\r\n        if (this.state.errorMessage && !this.state.lat) {\r\n            return <div>Error: {this.state.errorMessage}</div>\r\n        }\r\n        if (!this.state.errorMessage && this.state.lat) {\r\n            return <SeasonDisplay lat={this.state.lat} />\r\n        }\r\n        return <Spinner message='Please accept location request' />\r\n    }\r\n    render() {\r\n        return (\r\n\r\n\r\n\r\n            < div>\r\n                {/* setInterval(() => {\r\n                    this.setState(new Date().toLocaleTimeString())\r\n                }, 1000); */}\r\n                {this.renderContent()}\r\n\r\n            </div >\r\n\r\n        )\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}